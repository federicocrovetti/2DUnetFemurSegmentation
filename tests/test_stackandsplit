import SimpleITK as sitk
import numpy as np
import hypothesis as hp
from hypothesis import given, settings
import hypothesis.strategies as st
from SFUNet.utils.stackandsplit import NormDict, StackedData, Split

@st.composite
def dataset_generator(draw):
    dataset = {'features' : [], 'labels' : []}
    side = draw(st.lists(st.integers(0,1), min_size = 1, max_size = 3)) #[0,1]
    for i in range(len(side)):
        origin = draw(st.tuples(*[st.floats(0., 100.)] * 3))
        spacing = draw(st.tuples(*[st.floats(.1, 1.)] * 3))
        direction = tuple([1., 0., 0., 0., 1., 0., 0., 0., 1.])
        
        features = np.random.randint(low = 3, size=(40, 512, 512))
        if side[i] == 0:
            label = np.zeros((40, 512, 512))
            label[:, : , 0:256] = np.full((40, 512 , 256), 1)
        else:
            label = np.zeros((40, 512, 512))
            label[:, : , 256:512] = np.full((40, 512 , 256), 1)
        image = sitk.GetImageFromArray(features)
        labels = sitk.GetImageFromArray(label)
        image.SetOrigin(origin)
        image.SetSpacing(spacing)
        image.SetDirection(direction)
        labels.SetOrigin(origin)
        labels.SetSpacing(spacing)
        labels.SetDirection(direction)
        dataset['features'].append(image)
        dataset['labels'].append(labels)
    
    return (dataset, side) 


@st.composite
def array_dataset_generator(draw):
    dataset = {'features' : [], 'labels' : []}
    side = draw(st.lists(st.integers(0,1), min_size = 1, max_size = 3)) #[0,1]
    for i in range(len(side)):
       
        features = np.random.randint(low = 3, size=(40, 512, 512))
        features = np.transpose(features, axes=[1, 2, 0])
        if side[i] == 0:
            label = np.zeros((40, 512, 512))
            label[:, : , 0:256] = np.full((40, 512 , 256), 1)
            label = np.transpose(label, axes=[1, 2, 0])
        else:
            label = np.zeros((40, 512, 512))
            label[:, : , 256:512] = np.full((40, 512 , 256), 1)
            label = np.transpose(label, axes=[1, 2, 0])
        dataset['features'].append(features)
        dataset['labels'].append(label)
    
    return (dataset, side) 


#TESTS


@given(array_dataset_generator())
@settings(suppress_health_check=[hp.HealthCheck.too_slow], max_examples=20, deadline = None)
def test_normdict(dataset):
    data = dataset[0]
    norm_set = NormDict(data)
    for i in range(len(norm_set)):
        for j in range(len(norm_set['features'])):
            assert(np.ptp(norm_set['features'][j]) <= 1)
 

@given(dataset_generator())
@settings(suppress_health_check=[hp.HealthCheck.too_slow], max_examples=20, deadline = None)
def test_StackedData(dataset):
    data = dataset[0]
    stckd = StackedData(data)
    lenghts = []
    for i in range(len(data['features'])):
        lenghts.append(len(data['features'][i]))
    assert(len(stckd['features'] == np.sum(np.asarray(lenghts))))
    assert(len(stckd['labels'] == np.sum(np.asarray(lenghts))))
